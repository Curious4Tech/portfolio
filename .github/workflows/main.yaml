name: Portfolio CI/CD

permissions:
  contents: read
  issues: write
  actions: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  AZURE_WEBAPP_NAME: 'curios4tech-portfolio'
  AZURE_RESOURCE_GROUP: 'Azure-RG'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          CI: true
          NODE_ENV: production

      # Prepare deployment package
      - name: Prepare package
        run: |
          # Create deployment package directory
          mkdir -p deploy-package
          
          # Copy necessary files
          cp -r .next deploy-package/
          cp -r public deploy-package/
          cp package*.json deploy-package/
          cp next.config.js deploy-package/
          
          # Create web.config for Azure
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="node_modules/next/dist/bin/next" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="Next.js" stopProcessing="true">
                    <match url="/*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="node_modules/next/dist/bin/next" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode nodeProcessCommandLine="node" />
            </system.webServer>
          </configuration>' > deploy-package/web.config

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Configure Azure Web App settings
      - name: Configure Web App
        run: |
          # Update web app settings
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --linux-fx-version "NODE|20-lts" \
            --node-version "20-lts"

          # Configure app settings
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
              WEBSITE_RUN_FROM_PACKAGE=0 \
              NODE_ENV=production \
              PORT=8080

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: deploy-package
          slot-name: production

      - name: Check Deployment Status
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          # Check web app status
          STATUS=$(az webapp show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query state -o tsv)
          
          echo "Web App Status: $STATUS"
          
          # Get recent logs
          echo "Recent logs:"
          az webapp log show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --lines 50

      - name: Azure Logout
        if: always()
        run: az logout

      - name: Update deployment status
        if: always()
        run: |
          echo "Deployment Status: ${{ job.status }}"
          echo "Completed at: $(date -u)"
          echo "Workflow run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
